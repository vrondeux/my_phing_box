<?xml version="1.0" encoding="UTF-8"?>

<!-- *Do not use any later versions than 2.4.12 due to [a bug in Phing](http://www.phing.info/trac/ticket/958)*. -->
<project name="my_box" default="build" phingVersion="2.4.11">

<!-- ## Main targets -->

<!-- ### Build project

Do a complete build of the project by verifying code consistency and and
performing static analysis of the code.

This is the default build target.
-->

  <target name="build"
          description="Install the site and migrate content"
          depends="site-install,
                   enable-dev-mode,
                   run-migrate,
                   config-masquerade,
                   check-features" />

<!-- ### Load properties

Loads a set of project specific properties from a `.properties` file.

These properties contain information regarding the individual project and/or
environment such as which version of Drupal you are using, how to create a
database and the names of your custom modules.

All available properties are described and set to a default value in `build.default.properties`.
You should create your own properties file by copying the `build.default.properties` file to the root 
directory, rename it `build.properties` and modify it according to your project.

Both property files are loaded so your custom `build.properties` file should
only contain properties where you want to override the default value e.g. set
your custom module code prefix or use a special version of one of the build
tools. -->
  <target name="load-properties">
    <php function="dirname" returnProperty="phing.dir">
      <param value="${phing.file}"/>
    </php>

    <property name="project.basedir" value="${phing.dir}" />

    <!-- Use condition instead of unless property as we cannot unset properties in Phing -->
    <if>
      <or>
        <!-- `istrue` evaluates to true is value is not set we need to check
             `isset` as well -->
        <not><istrue value="${project.properties.loaded}" /></not>
        <not><isset property="project.properties.loaded" /></not>
      </or>
      <then>
<!-- By default Jenkins runs Phing from the directory containing the build
file.  If this file is located in a subdirectory - e.g. when using Phing Drupal as a submodule - we need to reset the project basedir and reload properties.

NB: This only works if the subdirectory is directly within the Drupal
root directory. -->
        <if>
          <!-- If `build.properties` exists then assume we have a
               project root directory -->
          <available file="${project.basedir}/../build.properties"/>
          <then>
            <resolvepath propertyName="project.basedir"
                         file="${project.basedir}/../"/>
          </then>
        </if>

        <!-- By default use default properties file
             `build.default.properties` -->
        <property name="project.properties.file"
                  value="${phing.dir}/build.default.properties" />
        <!-- Load the default properties.
             Override in case `load-properties` are called multiple times. -->
        <property file="${project.properties.file}" override="true" />

        <!-- Allow override using `build.properties` in build file
             directory -->
        <available file="${phing.dir}/build.properties"
                   property="project.properties.file"
                   value="${phing.dir}/build.properties" />
        <!-- Allow override using `build.properties` in project base
             directory -->
        <available file="${project.basedir}/build.properties"
                   property="project.properties.file"
                   value="${project.basedir}/build.properties" />

        <!-- Load the overriding properties. -->
        <property file="${project.properties.file}" override="true" />

        <!-- Set property to prevent unnecessary additional invocations of this target -->
        <property name="project.properties.loaded" value="true" />
      </then>
    </if>
  </target>

  <target name="make-build"
          depends="make,build"
          description="Makes and builds the profile">
  </target>

  <target name="make"
          depends="setup-phing-drush"
          description="Rebuilds the profile using Drush make">

    <!-- Clone the makefile in a temporary directory-->
    <phingcall target="setup-git-repo">
      <property name="repo.dir" 
                value="${phing.tempdir}"/>
      <property name="repo.url"
                value="${drupal.make.repo}" />
      <property name="repo.revision"
                value="${drupal.make.revision}" />
    </phingcall>

    <!-- Make the project in the current directory. Easiest for deployment -->
    <if>
      <istrue value="${drupal.make.working_copy}"/>
      <then>
        <!-- Make and keep the working copies -->
        <drush command="make" assume="yes">
          <param>${phing.tempdir}/${drupal.make.makefile}</param>
          <option name="working-copy"></option>
          <param>.</param>
        </drush>
      </then>
      <else>
        <!-- Normal drush make -->
        <drush command="make" assume="yes">
          <param>${phing.tempdir}/${drupal.make.makefile}</param>
          <param>.</param>
        </drush>
      </else>
    </if>

    <!-- Clean the temporary directory, we don't need this anymore -->
    <delete dir="${phing.tempdir}"/>

  </target>


  <!-- Removes all files of the Drupal installation -->
  <target name="clean"
          description="Removes a Drupal installation. Use carefully!">
    <foreach list="includes,misc,modules,profiles,scripts,sites,themes,phing" param="item" target="delete-dir" delimiter=","/>
    <foreach list=".htaccess,authorize.php,CHANGELOG.txt,LICENSE.txt,COPYRIGHT.txt,cron.php,index.php,INSTALL.mysql.txt,INSTALL.pgsql.txt,install.php,INSTALL.sqlite.txt,INSTALL.txt,MAINTAINERS.txt,README.txt,PATCHES.txt,robots.txt,update.php,UPGRADE.txt,web.config,xmlrpc.php" param="item" target="delete-file" delimiter=","/>
  </target>

  <target name="delete-dir">
    <delete dir="${item}"/>
  </target>

  <target name="delete-file">
    <delete file="${item}" verbose="true" />
  </target>


<!-- ### Setup directories

Define working directories - where the individual parts of the build are and
should be located. These are used in other targets.

This is part of the initialization of the build. This target should only be
called from `init` target. -->
  <target name="setup-dirs"
          depends="load-properties">
    <property name="project.drupal.dir"
                value="${project.basedir}" />

    <property name="project.sitesdir"
              value="${project.drupal.dir}/${project.code.dir}" />

    <property name="project.toolsdir"
              value="${project.basedir}/sites/all/drush" />

  </target>

  <!-- ### Setup permissions

Set permissions for certain files correctly after it has been built. This is
required to support using the site after it has been built e.g. for conducting
tests and site allow it to be rebuilt later on.

By default the built site will be owned by the Jenkins user and allow
others to read. We allow read, write and execute access for all to give users
such as apache running the webserver the necessary permissions. -->
    <target name="setup-permissions"
            depends="setup-dirs">
      <!-- Allow write access to files directory. -->
      <chmod mode="0777" failonerror="false">
        <fileset dir="${project.drupal.dir}">
          <patternset>
            <include name="sites/default"/>
            <include name="sites/default/**/*"/>
          </patternset>
        </fileset>
      </chmod>
      <!-- If the build uses SQLite then we update permissions to the
           database file and the directory containing the file. -->
      <if>
        <contains string="${drupal.db.url}" substring="sqlite"/>
        <then>
          <php expression="dirname(substr('${drupal.db.url}', 7));"
               returnProperty="drupal.sqlite.dir" />
          <php expression="basename(substr('${drupal.db.url}', 7));"
               returnProperty="drupal.sqlite.file" />
          <chmod file="${drupal.sqlite.dir}" mode="0777" failonerror="true"/>
          <chmod file="${drupal.sqlite.dir}/${drupal.sqlite.file}" mode="0777" failonerror="true"/>
        </then>
      </if>
    </target>

<!-- ### Install a Drupal site

This initializes a Drupal site using a installation profile.

Configuration of which installation profile and database to use in done in
`build.properties`. -->
  <target name="site-install"
          depends="setup-phing-drush"
          description="Installs the site"
          unless="project.installed">
    <drush command="site-install" assume="yes">
      <option name="db-url">${drupal.db.url}</option>
      <option name="account-name">${drupal.admin.name}</option>
      <option name="account-pass">${drupal.admin.pass}</option>
      <option name="site-name">${drupal.site.name}</option>
      <param>${drupal.profile}</param>
    </drush>

    <!-- Revert features so all configuration is guaranteed to be in place. Since features 2.0 this is necessary -->
    <drush command="features-revert-all" assume="yes">
    </drush>

    <phingcall target="setup-permissions"/>

    <!-- Enable RewriteBase in .htaccess if the installation is to be
exposed through Apache with virtual document root as clean urls are enabled
by default.

Keep legacy support for drupal.make.rewritebase when this was handled as a
part of make target.-->
    <condition property="drupal.rewritebase"
               value="${drupal.make.rewritebase}">
      <isset property="drupal.make.rewritebase"/>
    </condition>
    <if>
      <isset property="drupal.rewritebase" />
      <then>
        <reflexive file="${project.drupal.dir}/.htaccess">
          <filterchain>
            <replaceregexp>
              <regexp pattern="# RewriteBase [\w/]*" replace="RewriteBase ${drupal.rewritebase}"/>
            </replaceregexp>
          </filterchain>
        </reflexive>
      </then>
    </if>

    <!-- Set property to prevent target from being executed multiple times -->
    <property name="project.installed" value="true"/>
  </target>

  <!-- ### Run migrate procedures -->
  <target name="run-migrate"
          description="Migrate content into the installed site"
          depends="setup-phing-drush">
    <!-- Enable migrate and migrate_ui -->
    <drush command="en" assume="yes">
      <param>migrate,migrate_ui</param>
    </drush>
    <!-- Enable my_migrate_example for context fixture demonstration purposes. -->
    <drush command="en" assume="yes">
      <param>my_migrate_example</param>
    </drush>
    <if>
      <istrue value="${drupal.migrate}"/>
      <then>
        <!-- Register automatically again. Sometimes migrate tasks are not properly registered on a fresh install. -->
        <drush command="migrate-auto-register" assume="yes">
        </drush>
        <!-- Migrate all. Here we assume we do have the migrate module enabled, but this is part of our standard stack. -->
        <drush command="mi" assume="yes">
          <option name="all"></option>
        </drush>
      </then>
    </if>
  </target>

  <!-- ### Configure masquerade -->
  <target name="config-masquerade"
          description="Configure masquerade"
          depends="run-migrate, setup-phing-drush">
    <drush command="user-create" assume="yes">
      <param>editor</param>
      <option name="password">editor</option>
      <option name="mail">editor@example.org</option>
    </drush>
    <!-- Little trick to automatically configure masquerade to show quick switches for two users. Very useful for quick role testing. -->
    <exec command='php -r "print json_encode(array(0 => 3));" | drush vset --yes --format=json masquerade_quick_switches -'
      escape="false"
      checkreturn="true"
      passthru="true" />
  </target>

  <!-- ### Check features state -->
  <target name="check-features"
          depends="setup-phing-drush">
    <drush command="features" assume="yes">
    </drush>
  </target>

  <!-- ### Enable dev mode -->
  <target name="enable-dev-mode"
          description="Configures this installation for use in development"
          depends="setup-phing-drush">
    <drush command="en" assume="yes">
      <param>devel</param>
    </drush>
  </target>

  <!-- ### Clone a git repository -->
  <target name="setup-git-repo">
    <!-- Only clone if repository does not exist already -->
    <if>
      <not><available file="${repo.dir}" /></not>
      <then>
        <!-- Set revision to HEAD if not already defined -->
        <property name="repo.revision" value="HEAD" override="false"/>

        <echo>Cloning ${repo.url} ${repo.revision} into ${repo.dir}</echo>
        <!-- The [`gitclone` task](http://www.phing.info/docs/guide/stable/chapters/appendixes/AppendixC-OptionalTasks.html#GitCloneTask)
             does not seem to work. Use exec instead. -->
        <exec command="git clone ${repo.url} ${repo.dir}" />
        <exec command="git checkout ${repo.revision}" dir="${repo.dir}"/>
      </then>
    </if>
  </target>

  <!-- ### Setup Phing Drush integration -->
  <target name="setup-phing-drush"
          depends="setup-dirs" >
    <!-- Clone the project -->
    <phingcall target="setup-git-repo">
      <property name="repo.dir"
                value="${phing.toolsdir}/phing-drush"/>
      <property name="repo.url"
                value="${phing.drush.repository.url}" />
      <property name="repo.revision"
                value="${phing.drush.repository.revision}" />
    </phingcall>

    <!-- Register as custom Phing task -->
    <taskdef name="drush" classname="DrushTask"
             classpath="${phing.toolsdir}/phing-drush" />

    <!-- Run drush from the project Drupal directory -->
    <property name="drush.root" value="${project.drupal.dir}"/>
  </target>

</project>
